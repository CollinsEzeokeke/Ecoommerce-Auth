// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  BASIC_USER
  COMPANY
  SUPER_ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  role      UserRole @default(BASIC_USER)
  createdAt DateTime @default(now())
  image     String?
  updatedAt DateTime @updatedAt

  // Fields for basic users by default
  userName  String?
  FirstName String?
  LastName  String?
  SureName  String?

  // Fields for companies
  companyName String?
  description String?
  location    String?
  telephone   String?

  // NextAuth fields
  // so i removed this out as i haven't started checking this
  // emailVerified Boolean?

  // for getting the token
  emailVerificationToken String?
  emailVerified          Boolean   @default(false)
  tokenExpiresAt         DateTime?

  // Relationships
  products                Product[]
  comments                Comment[]
  ratings                 Rating[]
  companyProfile          CompanyProfile?
  givenCompanyComments    Comment[]       @relation("CompanyComments")
  givenCompanyRatings     Rating[]        @relation("CompanyRatings")
  receivedCompanyComments Comment[]       @relation("ReceivedCompanyComments")
  receivedCompanyRatings  Rating[]        @relation("ReceivedCompanyRatings")

  // Session Session[]
  // Account Account[]

  @@map("user")
}

model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  companyId String
  company   User      @relation(fields: [companyId], references: [id])
  comments  Comment[]
  ratings   Rating[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  productId          String?
  product            Product? @relation(fields: [productId], references: [id])
  companyId          String?
  company            User?    @relation(name: "CompanyComments", fields: [companyId], references: [id])
  receivingCompany   User?    @relation(name: "ReceivedCompanyComments", fields: [receivingCompanyId], references: [id])
  receivingCompanyId String?
}

model Rating {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  productId          String?
  product            Product? @relation(fields: [productId], references: [id])
  companyId          String?
  company            User?    @relation(name: "CompanyRatings", fields: [companyId], references: [id])
  receivingCompany   User?    @relation(name: "ReceivedCompanyRatings", fields: [receivingCompanyId], references: [id])
  receivingCompanyId String?
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}
